/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.10.2/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    `java-library`
    // Shadow plugin causes Java 21 compatibility issues, using custom fat jar task instead
    // id("com.github.johnrengelman.shadow") version "8.1.1"
}

group = "jp.vemi"
version = "1.0.0"

repositories {
    mavenCentral()
}

dependencies {
    implementation("com.fasterxml.jackson.core:jackson-databind:2.18.4")

    testImplementation(libs.junit.jupiter)
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    api(libs.commons.math3)
    implementation(libs.guava)
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

tasks {
    // Custom fat jar task to replace shadowJar for Java 21 compatibility
    val fatJar = register<Jar>("fatJar") {
        archiveClassifier.set("all")
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        
        from(sourceSets.main.get().output)
        
        from({
            configurations.runtimeClasspath.get().filter { it.name.endsWith("jar") }.map { zipTree(it) }
        }) {
            exclude("META-INF/*.SF")
            exclude("META-INF/*.DSA")
            exclude("META-INF/*.RSA")
        }
        
        archiveFileName.set("${project.name}-${project.version}.jar")
        destinationDirectory.set(file("build/libs"))
        
        manifest {
            attributes(mapOf(
                "Implementation-Title" to project.name,
                "Implementation-Version" to project.version
            ))
        }
    }
    
    // Keep shadowJar task for backward compatibility but make it depend on fatJar
    register<Copy>("shadowJar") {
        dependsOn(fatJar)
        mustRunAfter("jar") // Ensure jar task completes before this task
        from(file("build/libs/${project.name}-${project.version}.jar"))
        into(file("build/libs"))
        doFirst {
            // Ensure the source file exists
            val sourceFile = file("build/libs/${project.name}-${project.version}.jar")
            if (!sourceFile.exists()) {
                throw GradleException("Fat JAR not found at ${sourceFile.absolutePath}")
            }
        }
    }
    
    build {
        dependsOn(fatJar)
    }
    
    named<Test>("test") {
        useJUnitPlatform()
    }
}
